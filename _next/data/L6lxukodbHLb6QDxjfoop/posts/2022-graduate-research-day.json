{"pageProps":{"postData":{"id":"2022-graduate-research-day","contentHtml":null,"title":"Semantic-preserving optimization algorithm for automatic program parallelization","author":"Neea Rusch","date":"2022-04-01","presentation":true,"embed_title":"Poster","embed":"../files/grd_poster.pdf","preface":"<p>Presented at Augusta University <a href=\"https://web.archive.org/web/20240418043248/https://www.augusta.edu/gradschool/grd-2022.php\">37th Annual Graduate Research Day</a> (<a href=\"/files/2022_grd_program.pdf\">program</a>) on 1 April 2022. This presentation was recognized with <em>Excellence in Research - Computer &#x26; Cyber Sciences</em> award by The Graduate School.</p>","abstract":"<p>Advanced and resource-intensive computation relies on continuous rise in processing power. Since the 1970s, Moore's law accurately predicted this growth would be achieved through hardware improvements, but this observation is becoming progressively obsolete. Alternative approaches are needed to maintain increase in efficiency. Parallelization is a technique in which larger computational problem is divided into smaller tasks, which are then executed simultaneously, reducing overall time to completion. Specialized software and algorithms are required to enable parallelization.\nThis research presents a novel algorithm for automatic program parallelization based on loop splitting. In programming, loop statements are used for carrying out repeated computation, but when used extensively or carelessly, will produce performance inefficiencies. Using a graph-based variable dependency analysis, the algorithm detects opportunities for splitting loops into smaller, parallelizable loops; then automatically applies this optimization. Additionally, the algorithm guarantees the preservation of program semantics post-transformation. We hypothesize this algorithm, when combined with OpenMP--an existing state-of-the-art multiprocessing tool--will provide noticeable performance gains for resource-intensive computational tasks. An open-source tool, pyalp, implementing this algorithm on C programs, is currently being developed to demonstrate and measure its efficiency in practice.</p>","abs_plain":" Advanced and resource-intensive computation relies on continuous rise in processing power. Since the 1970s, Moore's law accurately predicted this growth would be achieved through hardware improvements, but this observation is becoming progressively obsolete. Alternative approaches are needed to maintain increase in efficiency. Parallelization is a technique in which larger computational problem is divided into smaller tasks, which are then executed simultaneously, reducing overall time to completion. Specialized software and algorithms are required to enable parallelization.\nThis research presents a novel algorithm for automatic program parallelization based on loop splitting. In programming, loop statements are used for carrying out repeated computation, but when used extensively or carelessly, will produce performance inefficiencies. Using a graph-based variable dependency analysis, the algorithm detects opportunities for splitting loops into smaller, parallelizable loops; then automatically applies this optimization. Additionally, the algorithm guarantees the preservation of program semantics post-transformation. We hypothesize this algorithm, when combined with OpenMP--an existing state-of-the-art multiprocessing tool--will provide noticeable performance gains for resource-intensive computational tasks. An open-source tool, pyalp, implementing this algorithm on C programs, is currently being developed to demonstrate and measure its efficiency in practice. "},"talkData":{"talks":[{"plas":{"title":"An Information Flow Calculus for Non-Interference","url":"2024-plas","where":"Workshop on Programming Languages and Analysis for Security (PLAS)","when":"2024-10-14","location":"Salt Lake City, Utah","icon":"üá∫üá∏"}},{"aalto":{"title":"Implicit Computational Complexity: From Theory to Practice","url":"2024-aalto","where":"Theoretical Computer Science weekly seminar at Aalto University","when":"2024-08-20","location":"Espoo, Finland","icon":"üá´üáÆ"}},{"atva":{"title":"pymwp: A Static Analyzer Determining Polynomial Growth Bounds","url":"2023-atva","where":"International Symposium on Automated Technology for Verification and Analysis (ATVA)","when":"2023-10-25","location":"Singapore","icon":"üá∏üá¨"}},{"scot":{"title":"mwp-Analysis Improvement and Implementation","url":"2023-scot","where":"SCOT Seminar on Semantic and Formal Approaches to Complexity","when":"2023-03-10","location":"online","icon":"üåê"}},{"coqpl":{"title":"Certifying Complexity Analysis","url":"2023-coqpl","where":"International Workshop on Coq for Programming Languages (CoqPL)","when":"2023-01-21","location":"Boston, Massachusetts","icon":"üá∫üá∏"}},{"vmcai":{"title":"Distributing and Parallelizing Non-canonical Loops","url":"2023-vmcai","where":"International Conference on Verification, Model Checking, and Abstract Interpretation (VMCAI)","when":"2023-01-16","location":"Boston, Massachusetts","icon":"üá∫üá∏"}},{"splash":{"title":"Formally Verified Resource Bounds Through Implicit Computational Complexity","url":"2022-splash","where":"Doctoral Symposium at SPLASH","when":"2022-12-06","location":"Auckland, New Zealand","icon":"üá≥üáø"}},{"types":{"title":"Realizing Implicit Computational Complexity","url":"2022-types","where":"International Conference on Types for Proofs and Programs (TYPES)","when":"2022-06-20","location":"Nantes, France","icon":"üá´üá∑"}},{"grd22":{"title":"Semantic-preserving optimization algorithm for automatic program parallelization","url":"2022-graduate-research-day","where":"The 37th Annual Graduate Research Day at Augusta University","when":"2022-04-01","location":"Augusta, Georgia","icon":"üá∫üá∏"}},{"lipn":{"title":"Implementing the mwp-flow analysis","url":"2021-implementing-the-mwp-flow-analysis","where":"IRISA Rennes and LIPN seminars","when":"2021-11-15","location":"Rennes and Paris, France","icon":"üá´üá∑"}},{"grd21":{"title":"Certifying the complexity and correctness of critical software","url":"2021-graduate-research-day","where":"The 36th Annual Graduate Research Day at Augusta University","when":"2021-03-31","location":"online","icon":"üåê"}}]}},"__N_SSG":true}