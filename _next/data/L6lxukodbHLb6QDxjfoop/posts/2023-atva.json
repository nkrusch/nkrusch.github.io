{"pageProps":{"postData":{"id":"2023-atva","contentHtml":null,"title":"pymwp: A Static Analyzer Determining Polynomial Growth Bounds","author":"Neea Rusch","date":"2023-10-31","presentation":true,"embed_title":"Slides","embed":"../files/atva_slides.pdf","embed_ratio":"169","paper_title":"https://hal.science/hal-03269121v4/document","paper":"https://hal.science/hal-03269121v4/document","preface":"<p>I presented this talk at <a href=\"https://atva-conference.org/2023/\">ATVA 2023</a>, the 21st International Symposium on Automated Technology for Verification and Analysis, on October 25, 2023.</p>","abstract":"<p>We present pymwp, a static analyzer that automatically computes, if they exist, polynomial bounds relating input and output sizes. In case of exponential growth, our tool detects precisely which dependencies between variables induced it. Based on the sound mwp-flow calculus, the analysis captures bounds on large classes of programs by being non-deterministic and not requiring termination. For this reason, implementing this calculus required solving several non-trivial implementation problems, to handle its complexity and non-determinism, but also to provide meaningful feedback to the programmer. The duality of the analysis result and compositionality of the calculus make our approach original in the landscape of complexity analyzers. We conclude by demonstrating experimentally how pymwp is a practical and performant static analyzer to automatically evaluate variable growth bounds of C programs.</p>","abs_plain":"We present pymwp, a static analyzer that automatically computes, if they exist, polynomial bounds relating input and output sizes. In case of exponential growth, our tool detects precisely which dependencies between variables induced it. Based on the sound mwp-flow calculus, the analysis captures bounds on large classes of programs by being non-deterministic and not requiring termination. For this reason, implementing this calculus required solving several non-trivial implementation problems, to handle its complexity and non-determinism, but also to provide meaningful feedback to the programmer. The duality of the analysis result and compositionality of the calculus make our approach original in the landscape of complexity analyzers. We conclude by demonstrating experimentally how pymwp is a practical and performant static analyzer to automatically evaluate variable growth bounds of C programs."},"talkData":{"talks":[{"plas":{"title":"An Information Flow Calculus for Non-Interference","url":"2024-plas","where":"Workshop on Programming Languages and Analysis for Security (PLAS)","when":"2024-10-14","location":"Salt Lake City, Utah","icon":"🇺🇸"}},{"aalto":{"title":"Implicit Computational Complexity: From Theory to Practice","url":"2024-aalto","where":"Theoretical Computer Science weekly seminar at Aalto University","when":"2024-08-20","location":"Espoo, Finland","icon":"🇫🇮"}},{"atva":{"title":"pymwp: A Static Analyzer Determining Polynomial Growth Bounds","url":"2023-atva","where":"International Symposium on Automated Technology for Verification and Analysis (ATVA)","when":"2023-10-25","location":"Singapore","icon":"🇸🇬"}},{"scot":{"title":"mwp-Analysis Improvement and Implementation","url":"2023-scot","where":"SCOT Seminar on Semantic and Formal Approaches to Complexity","when":"2023-03-10","location":"online","icon":"🌐"}},{"coqpl":{"title":"Certifying Complexity Analysis","url":"2023-coqpl","where":"International Workshop on Coq for Programming Languages (CoqPL)","when":"2023-01-21","location":"Boston, Massachusetts","icon":"🇺🇸"}},{"vmcai":{"title":"Distributing and Parallelizing Non-canonical Loops","url":"2023-vmcai","where":"International Conference on Verification, Model Checking, and Abstract Interpretation (VMCAI)","when":"2023-01-16","location":"Boston, Massachusetts","icon":"🇺🇸"}},{"splash":{"title":"Formally Verified Resource Bounds Through Implicit Computational Complexity","url":"2022-splash","where":"Doctoral Symposium at SPLASH","when":"2022-12-06","location":"Auckland, New Zealand","icon":"🇳🇿"}},{"types":{"title":"Realizing Implicit Computational Complexity","url":"2022-types","where":"International Conference on Types for Proofs and Programs (TYPES)","when":"2022-06-20","location":"Nantes, France","icon":"🇫🇷"}},{"grd22":{"title":"Semantic-preserving optimization algorithm for automatic program parallelization","url":"2022-graduate-research-day","where":"The 37th Annual Graduate Research Day at Augusta University","when":"2022-04-01","location":"Augusta, Georgia","icon":"🇺🇸"}},{"lipn":{"title":"Implementing the mwp-flow analysis","url":"2021-implementing-the-mwp-flow-analysis","where":"IRISA Rennes and LIPN seminars","when":"2021-11-15","location":"Rennes and Paris, France","icon":"🇫🇷"}},{"grd21":{"title":"Certifying the complexity and correctness of critical software","url":"2021-graduate-research-day","where":"The 36th Annual Graduate Research Day at Augusta University","when":"2021-03-31","location":"online","icon":"🌐"}}]}},"__N_SSG":true}