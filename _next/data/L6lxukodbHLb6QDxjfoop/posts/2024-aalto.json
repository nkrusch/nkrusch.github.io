{"pageProps":{"postData":{"id":"2024-aalto","contentHtml":null,"title":"Implicit Computational Complexity: From Theory to Practice","author":"Neea Rusch","date":"2024-08-20","presentation":true,"embed_title":"Slides","embed":"../files/aalto_slides.pdf","embed_ratio":"169","preface":"<p>I presented this talk at the <a href=\"https://www.aalto.fi/en/department-of-computer-science/theoretical-computer-science\">Aalto University Theoretical Computer Science</a> weekly seminar, on August 20, 2024.</p>","abstract":"<p>Implicit Computational Complexity (ICC) complements traditional complexity theory through machine-independent characterizations of complexity classes. These characterizations aim at defining syntactic restrictions, embedded in a programming language, to guarantee runtime behavior; typically, complexity. Thus, ICC temporally shifts complexity to an apriori design consideration. Over the past thirty years, various ICC systems have been developed; however, they have largely remained at a theoretical level. This is discouraging in two ways. First, it prevents validating the techniques in real-world scenarios and assessing their full potential. Second, it restricts the spread of ICC techniques to wider research communities that could benefit from them. This presentation discusses a valiant effort to overcome the above challenge. It presents the applications of ICC we have discovered so far, in static analysis and in guaranteeing extended semantic properties in compiler transformations and software security. It also highlights the obstacles in bridging fruitful collaborations between separate research communities and reflects on strategies of success.</p>","abs_plain":"Implicit Computational Complexity (ICC) complements traditional complexity theory through machine-independent characterizations of complexity classes. These characterizations aim at defining syntactic restrictions, embedded in a programming language, to guarantee runtime behavior; typically, complexity. Thus, ICC temporally shifts complexity to an apriori design consideration. Over the past thirty years, various ICC systems have been developed; however, they have largely remained at a theoretical level. This is discouraging in two ways. First, it prevents validating the techniques in real-world scenarios and assessing their full potential. Second, it restricts the spread of ICC techniques to wider research communities that could benefit from them. This presentation discusses a valiant effort to overcome the above challenge. It presents the applications of ICC we have discovered so far, in static analysis and in guaranteeing extended semantic properties in compiler transformations and software security. It also highlights the obstacles in bridging fruitful collaborations between separate research communities and reflects on strategies of success."},"talkData":{"talks":[{"plas":{"title":"An Information Flow Calculus for Non-Interference","url":"2024-plas","where":"Workshop on Programming Languages and Analysis for Security (PLAS)","when":"2024-10-14","location":"Salt Lake City, Utah","icon":"🇺🇸"}},{"aalto":{"title":"Implicit Computational Complexity: From Theory to Practice","url":"2024-aalto","where":"Theoretical Computer Science weekly seminar at Aalto University","when":"2024-08-20","location":"Espoo, Finland","icon":"🇫🇮"}},{"atva":{"title":"pymwp: A Static Analyzer Determining Polynomial Growth Bounds","url":"2023-atva","where":"International Symposium on Automated Technology for Verification and Analysis (ATVA)","when":"2023-10-25","location":"Singapore","icon":"🇸🇬"}},{"scot":{"title":"mwp-Analysis Improvement and Implementation","url":"2023-scot","where":"SCOT Seminar on Semantic and Formal Approaches to Complexity","when":"2023-03-10","location":"online","icon":"🌐"}},{"coqpl":{"title":"Certifying Complexity Analysis","url":"2023-coqpl","where":"International Workshop on Coq for Programming Languages (CoqPL)","when":"2023-01-21","location":"Boston, Massachusetts","icon":"🇺🇸"}},{"vmcai":{"title":"Distributing and Parallelizing Non-canonical Loops","url":"2023-vmcai","where":"International Conference on Verification, Model Checking, and Abstract Interpretation (VMCAI)","when":"2023-01-16","location":"Boston, Massachusetts","icon":"🇺🇸"}},{"splash":{"title":"Formally Verified Resource Bounds Through Implicit Computational Complexity","url":"2022-splash","where":"Doctoral Symposium at SPLASH","when":"2022-12-06","location":"Auckland, New Zealand","icon":"🇳🇿"}},{"types":{"title":"Realizing Implicit Computational Complexity","url":"2022-types","where":"International Conference on Types for Proofs and Programs (TYPES)","when":"2022-06-20","location":"Nantes, France","icon":"🇫🇷"}},{"grd22":{"title":"Semantic-preserving optimization algorithm for automatic program parallelization","url":"2022-graduate-research-day","where":"The 37th Annual Graduate Research Day at Augusta University","when":"2022-04-01","location":"Augusta, Georgia","icon":"🇺🇸"}},{"lipn":{"title":"Implementing the mwp-flow analysis","url":"2021-implementing-the-mwp-flow-analysis","where":"IRISA Rennes and LIPN seminars","when":"2021-11-15","location":"Rennes and Paris, France","icon":"🇫🇷"}},{"grd21":{"title":"Certifying the complexity and correctness of critical software","url":"2021-graduate-research-day","where":"The 36th Annual Graduate Research Day at Augusta University","when":"2021-03-31","location":"online","icon":"🌐"}}]}},"__N_SSG":true}